import base64


from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from aiogram import F



from kafka.producer import producer
from utils.enhance_prompt import enhance_prompt

class Form(StatesGroup):
    ModelSelection = State()
    StyleSelection = State()
    PromptInput = State()
    FaceswapSource = State()
    FaceswapTarget = State() 

STYLE_MAP = {
    "üéØ –†–µ–∞–ª–∏–∑–º": "realistic",
    "üé® –ê—Ä—Ç": "artistic",
    "üå∏ –ê–Ω–∏–º–µ": "anime",
    "üåÜ –ö–∏–±–µ—Ä–ø–∞–Ω–∫": "cyberpunk",
}

router = Router()


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "–í–æ—Ç –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:\n"
        "- **Stable Diffusion 1.5**: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ.\n"
        "- **FaceFusion 3.0: –∑–∞–º–µ–Ω–∞ –ª–∏—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏\n\n"
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /generate \n"
    )

@router.message(Command("faceswap"))
async def faceswap_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ª–∏—Ü–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å (–∏—Å—Ç–æ—á–Ω–∏–∫).")
    await state.set_state(Form.FaceswapSource)

@router.message(StateFilter(Form.FaceswapSource), F.content_type == "photo")
async def faceswap_receive_source(message: types.Message, state: FSMContext):
    photo = message.photo[-1]  # –±–µ—Ä—ë–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    file_id = photo.file_id

    await state.update_data(faceswap_source_file_id=file_id)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ª–∏—Ü–æ (—Ü–µ–ª—å).")
    await state.set_state(Form.FaceswapTarget)


@router.message(StateFilter(Form.FaceswapTarget), F.content_type == "photo")
async def faceswap_receive_target(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    target_file_id = photo.file_id

    data = await state.get_data()
    source_file_id = data.get("faceswap_source_file_id")

    if not source_file_id:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    await state.clear()

    bot = message.bot

    source_file = await bot.get_file(source_file_id)
    target_file = await bot.get_file(target_file_id)

    source_bytesio = await bot.download_file(source_file.file_path)
    target_bytesio = await bot.download_file(target_file.file_path)

    source_bytes = source_bytesio.read()
    target_bytes = target_bytesio.read()

    source_base64 = base64.b64encode(source_bytes).decode('utf-8')
    target_base64 = base64.b64encode(target_bytes).decode('utf-8')

    await producer.send_faceswap_request(
        user_id=message.chat.id,
        source_base64=source_base64,
        target_base64=target_base64,
    )

    await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É –ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")



@router.message(Command("generate"))
async def generate_command(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text)] for text in STYLE_MAP.keys()],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=keyboard,
    )
    await state.set_state(Form.StyleSelection)


@router.message(StateFilter(Form.StyleSelection))
async def choose_style(message: types.Message, state: FSMContext):
    style_text = message.text.strip()

    if style_text not in STYLE_MAP:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π.")
        return

    await state.update_data(selected_style_id=STYLE_MAP[style_text],
                            selected_style_human=style_text)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.set_state(Form.PromptInput)


# ---------- –≤–≤–æ–¥ –ø—Ä–æ–º—Ç–∞ ---------- #
@router.message(StateFilter(Form.PromptInput))
async def get_prompt(message: types.Message, state: FSMContext):
    prompt = message.text.strip()
    data = await state.get_data()

    style_id   = data["selected_style_id"]
    style_name = data["selected_style_human"]

    enhanced = enhance_prompt(prompt, style=style_id)

    await state.clear()

    await message.answer(
        f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n"
        f"–°—Ç–∏–ª—å: <b>{style_name}</b>\n"
        f"–ü—Ä–æ–º—Ç: <i>{enhanced['prompt']}</i>",
        parse_mode=ParseMode.HTML,
    )

    await producer.send_request(
        user_id=message.chat.id,
        prompt=enhanced["prompt"],
        negative_prompt=enhanced["negative_prompt"]
    )
