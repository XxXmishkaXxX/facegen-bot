from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


from kafka.producer import producer
from utils.enhance_prompt import enhance_prompt

class Form(StatesGroup):
    ModelSelection = State()
    StyleSelection = State()
    PromptInput = State()

STYLE_MAP = {
    "üéØ –†–µ–∞–ª–∏–∑–º": "realistic",
    "üé® –ê—Ä—Ç": "artistic",
    "üå∏ –ê–Ω–∏–º–µ": "anime",
    "üåÜ –ö–∏–±–µ—Ä–ø–∞–Ω–∫": "cyberpunk",
}

MODEL_MAP = {
    "Stable Diffusion¬†1.5": "sd15",
    "Realistic¬†Vision¬†4.0": "realistic_v40",
}

router = Router()


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "–í–æ—Ç –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:\n"
        "- **Stable Diffusion 1.5**: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ.\n"
        "- **Realistic Vision 4.0**: –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /generate \n"
    )

@router.message(Command("generate"))
async def generate_command(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /generate
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=name)] for name in MODEL_MAP.keys()
            ],
            resize_keyboard=True
        ),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.ModelSelection)

@router.message(StateFilter(Form.ModelSelection))
async def choose_model(message: types.Message, state: FSMContext):
    btn_text = message.text.strip()

    if btn_text not in MODEL_MAP:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
        return

    internal_id = MODEL_MAP[btn_text]
    await state.update_data(selected_model_id=internal_id,
                            selected_model_human=btn_text)

    style_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=name)] for name in STYLE_MAP.keys()
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å <b>{btn_text}</b>.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        parse_mode=ParseMode.HTML,
        reply_markup=style_kb
    )
    await state.set_state(Form.StyleSelection)


@router.message(StateFilter(Form.StyleSelection))
async def choose_style(message: types.Message, state: FSMContext):
    style_text = message.text.strip()

    if style_text not in STYLE_MAP:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π.")
        return

    await state.update_data(selected_style_id=STYLE_MAP[style_text],
                            selected_style_human=style_text)

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.set_state(Form.PromptInput)


# ---------- –≤–≤–æ–¥ –ø—Ä–æ–º—Ç–∞ ---------- #
@router.message(StateFilter(Form.PromptInput))
async def get_prompt(message: types.Message, state: FSMContext):
    prompt = message.text.strip()
    data = await state.get_data()

    model_id   = data["selected_model_id"]
    model_name = data["selected_model_human"]
    style_id   = data["selected_style_id"]
    style_name = data["selected_style_human"]

    enhanced = enhance_prompt(prompt, style=style_id)

    await state.clear()

    await message.answer(
        f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n"
        f"–ú–æ–¥–µ–ª—å: <b>{model_name}</b>\n"
        f"–°—Ç–∏–ª—å: <b>{style_name}</b>\n"
        f"–ü—Ä–æ–º—Ç: <i>{enhanced['prompt']}</i>",
        parse_mode=ParseMode.HTML,
    )

    await producer.send_request(
        user_id=message.chat.id,
        prompt=enhanced["prompt"],
        model=model_id,
        negative_prompt=enhanced["negative_prompt"]
    )